from collections import deque

# Function to perform BFS
def bfs(graph, start):
    visited = set()  # Set to keep track of visited nodes
    queue = deque([start])  # Queue for BFS
    visited.add(start)
    
    while queue:
        node = queue.popleft()
        print(node, end=" ")  # Print the current node
        
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

# Read graph input from the user
def read_graph():
    graph = {}
    num_edges = int(input("Enter the number of edges: "))
    
    for _ in range(num_edges):
        u, v = map(int, input("Enter an edge (u v): ").split())
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    return graph

# Main function
def main():
    # Read the graph from the user
    graph = read_graph()
    
    # Start BFS from the first node (you can change this)
    start_node = int(input("Enter the starting node for BFS: "))
    
    # Perform BFS
    print("Breadth First Search starting from node", start_node, ":")
    bfs(graph, start_node)

if __name__ == "__main__":
    main()
