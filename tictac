# 15. Implement any two-player game ( Modified Tic-Tac-Toe, Nim Game,
# Connect Four Game or Gomoku Game ) using min-max algorithm such
# that in every play either computer wins or it is a draw. 

import math

# Initialize board
board = [' ' for _ in range(9)]

def print_board(board):
    for i in range(3):
        print(board[3*i] + "|" + board[3*i+1] + "|" + board[3*i+2])
        if i < 2:
            print("-+-+-")

def check_winner(board, player):
    win_positions = [
        (0,1,2), (3,4,5), (6,7,8),  
        (0,3,6), (1,4,7), (2,5,8),  
        (0,4,8), (2,4,6)            
    ]
    for pos in win_positions:
        if board[pos[0]] == board[pos[1]] == board[pos[2]] == player:
            return True
    return False

def is_full(board):
    return ' ' not in board

# Minimax algorithm
def minimax(board, is_maximizing):
    if check_winner(board, 'O'):
        return 1
    if check_winner(board, 'X'):
        return -1
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

def computer_move(board):
    best_score = -math.inf
    move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                move = i
    board[move] = 'O'

def play_game():
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        move = int(input("Enter your move (1-9): ")) - 1
        if board[move] != ' ':
            print("Invalid move. Try again.")
            continue
        board[move] = 'X'

        if check_winner(board, 'X'):
            print_board(board)
            print("You win!")
            break

        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

        computer_move(board)
        print("\nComputer's move:")
        print_board(board)

        if check_winner(board, 'O'):
            print("Computer wins!")
            break

        if is_full(board):
            print("It's a draw!")
            break

# Start the game
play_game()


# 16. Implement any two-player game ( Modified Tic-Tac-Toe, Nim Game,
# Connect Four Game or Gomoku Game ) using min-max algorithm such
# that in every play either computer loses or it is a draw

import math

board = [' ' for _ in range(9)]

def print_board(board):
    for i in range(3):
        print(board[3*i] + "|" + board[3*i+1] + "|" + board[3*i+2])
        if i < 2:
            print("-+-+-")

def check_winner(board, player):
    win_positions = [
        (0,1,2), (3,4,5), (6,7,8),  
        (0,3,6), (1,4,7), (2,5,8),  
        (0,4,8), (2,4,6)            
    ]
    for pos in win_positions:
        if board[pos[0]] == board[pos[1]] == board[pos[2]] == player:
            return True
    return False

def is_full(board):
    return ' ' not in board

# Minimax algorithm (help human win)
def minimax(board, is_computer_turn):
    if check_winner(board, 'X'):
        return 1  # Human wins
    if check_winner(board, 'O'):
        return -1  # Computer wins
    if is_full(board):
        return 0  # Draw

    if is_computer_turn:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, False)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score
    else:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, True)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score

# Computer move (intentionally weak)
def computer_move(board):
    worst_score = math.inf
    move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, False)
            board[i] = ' '
            if score < worst_score:
                worst_score = score
                move = i
    board[move] = 'O'

# Main game loop
def play_game():
    print("Welcome to Tic-Tac-Toe! (Computer plays badly)")
    print_board(board)

    while True:
        # Player move
        move = int(input("Enter your move (1-9): ")) - 1
        if board[move] != ' ':
            print("Invalid move. Try again.")
            continue
        board[move] = 'X'

        # Check if player wins
        if check_winner(board, 'X'):
            print_board(board)
            print("You win!")
            break

        # Check draw
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

        # Computer move
        computer_move(board)
        print("\nComputer's move:")
        print_board(board)

        # Check if computer wins
        if check_winner(board, 'O'):
            print("Computer wins! (very rare)")
            break

        # Check draw
        if is_full(board):
            print("It's a draw!")
            break

# Start the game
play_game()
