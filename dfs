#Recursive
import csv

# Function to read the graph from the CSV file
def read_graph_from_csv(file_path):
    graph = {}
    with open(file_path, mode='r') as file:
        reader = csv.reader(file)
        for row in reader:
            node = int(row[0])  # The node
            neighbors = list(map(int, row[1].split(',')))  # List of neighbors
            graph[node] = neighbors
    return graph

# Recursive DFS function
def dfs_recursive(graph, node, visited):
    print(node, end=' ')  # Visit the node
    visited[node] = True  # Mark the node as visited
    for neighbor in graph[node]:  # Explore each neighbor
        if not visited[neighbor]:
            dfs_recursive(graph, neighbor, visited)

# Main function to initiate DFS
def main():
    # Replace 'your_graph.csv' with the path to your CSV file
    graph = read_graph_from_csv('your_graph.csv')  
    
    visited = {node: False for node in graph}  # Initialize all nodes as unvisited
    
    # Start DFS from the first node (you can change the starting node)
    starting_node = 0  # Adjust as needed
    print("DFS Recursive Traversal:")
    dfs_recursive(graph, starting_node, visited)

# Run the main function
if __name__ == "__main__":
    main()
# Function to perform Non-Recursive DFS
def non_recursive_dfs(graph, start_vertex):
    visited = set()  # Set to keep track of visited vertices
    stack = [start_vertex]  # Stack to simulate recursion

    while stack:
        vertex = stack.pop()  # Pop a vertex from the stack
        
        if vertex not in visited:
            print(vertex, end=" ")  # Visit the vertex
            visited.add(vertex)  # Mark it as visited
            
            # Push all unvisited neighbors onto the stack
            for neighbor in graph.get(vertex, []):
                if neighbor not in visited:
                    stack.append(neighbor)

# Function to read the graph from user input
def read_graph():
    graph = {}
    num_edges = int(input("Enter the number of edges: "))
    
    print("Enter the edges (in the format 'vertex1 vertex2'):")
    for _ in range(num_edges):
        u, v = map(int, input().split())
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)  # Since it's an undirected graph
    
    return graph

# Main function to run DFS
if __name__ == "__main__":
    # Read the graph from user input
    graph = read_graph()
    
    # Input the starting vertex
    start_vertex = int(input("Enter the starting vertex for DFS: "))
    
    print("Non-recursive DFS traversal starting from vertex", start_vertex)
    non_recursive_dfs(graph, start_vertex)
